require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PostsController do

  # This should return the minimal set of attributes required to create a valid
  # Post. As you add validations to Post, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PostsController. Be sure to keep this updated too.
  def valid_session
    {}
  end
  context '#index' do
    
    describe "visiting index should result in successful response" do
      it "returns http success" do
        visit "/posts"
        response.should be_success
      end
    end
  
    describe "unauthenticated access" do
      it "should say you don't have rights" do
        visit posts_path
        page.should have_content('need to sign in')
      end
    end
  
    describe "once correctly signed in" do  
      it "should include locations" do
        visit "/auth/twitter"
        visit posts_path
        page.should have_content('Author')
        page.should have_content('sessions')
      end 
    end
    
  end
  
  context '#new' do
    describe 'to encourage posting' do
      
      describe 'if user is not signed in' do        
        it 'should redirect straight to twitter auth' do
          get 'new'
          response.should be_redirect
        end
        
        it 'should show signed in' do
          visit '/posts/new'
          page.should have_content('Logout')
        end
      end
      
    end
  end

end
